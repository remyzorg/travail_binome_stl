
node metronome (reset : bool; delay : int) returns (tic, tac : bool);
  var hz,  n :  int; first,  state :  bool;  
let 
  
  hz = if reset then delay else (0 -> pre hz);
  first = (false -> pre first) or reset;
  n = if not first then 1 else 
        if reset or pre n = 0 then hz
        else pre n - 1;

  state = true -> if pre n = 0 then not pre state else pre state;

  tic = n = 0 and state;
  tac = n = 0 and not state;
  
  
  assert (delay >= 0);

tel 
  


node observerP1 (tic,  tac : bool) returns (res :  bool);
let
  res = not (tic and tac);
tel
  

node observerP2 (tic, tac :  bool) returns (res :  bool);
var last_state : bool;
let
  last_state = 
    if tic then true else if tac then false else false -> pre last_state;
  res =  
    not (tic and pre last_state) or 
    not (tac and not pre last_state);
tel


node observerP3 (tic,  reset :  bool; hz :  int) returns (res :  bool);
var counter :  int; waiting_second :  bool;
let
  assert(hz >=  0);

  waiting_second = false ->
    if reset then false else
      if tic then not pre waiting_second else
        pre waiting_second;
  counter = if waiting_second then 0 -> pre counter + 1 else 0;

  res = true -> if pre waiting_second and tic then pre counter = 2 * (hz + 1) 
        else true;
tel


node organizer (reset :  bool; delay :  int) returns (res1, res2, res3 :  bool);
var hz : int; tic, tac : bool;
let 
  
  hz = if reset then delay else (0 -> pre hz);
  tic, tac = metronome(reset,  delay);

  res1 = observerP1(tic, tac);
  res2 = observerP2(tic, tac);
  res3 = observerP3(tic, reset, hz);
tel
  
node organizer3 (reset :  bool; delay :  int) returns (tic, tac, res: bool);
var hz : int;
let 
  
  hz = if reset then delay else (0 -> pre hz);
  tic, tac = metronome(reset,  delay);

  res = observerP3(tic, reset, hz);
tel


node cell (tk_in, ovr_in, gr_in, rq_in :  bool) returns
  (ack_out, ovr_out, tk_out, gr_out : bool);
var w, w_and_t : bool;  
let 
  tk_out = false -> pre tk_in;  

  w = false -> rq_in and (tk_out or pre w);

  w_and_t = pre w and tk_out;

  ovr_out = w_and_t or ovr_in;

  gr_out = not rq_in and gr_in;
  
  ack_out = rq_in and (w_and_t or gr_in); 

tel

node arbitre_3(rq_in_1, rq_in_2, rq_in_3 : bool) returns 
  (ack_out_1, ack_out_2, ack_out_3, gr_out : bool);
var tk_in_1, ovr_in_1,
  tk_out_1, ovr_out_1, gr_in_1,
    
  tk_out_2, ovr_out_2, gr_out_2,

  tk_out_3, ovr_out_3, gr_out_3 : bool;
let
  tk_in_1 = true -> tk_out_3;
  ovr_in_1 = false;

  ack_out_1, ovr_out_1, tk_out_1, gr_out = 
    cell(tk_in_1, ovr_in_1, gr_out_2,  rq_in_1);

  ack_out_2, ovr_out_2, tk_out_2, gr_out_2 = 
    cell(tk_out_1, ovr_out_1, gr_out_3,  rq_in_2);

  ack_out_3, ovr_out_3, tk_out_3, gr_out_3 = 
    cell(tk_out_2, ovr_out_2, not ovr_out_3,  rq_in_3);
tel
