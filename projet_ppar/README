



Pseudo algo parallèle :

master = 0
size = 67000

MPI_Init
rank = MPI_Comm_rank
np = MPI_Comm_size 


(* Initialisation *)

local_size = size / np

A = calloc
b = calloc
xA = calloc
xB = calloc
r = calloc


décomposer les boucles d'initialisation
la matrix doit rester diagonale



décomposer l'itération de Jacobi entre tout les processus : 
faire un ring


x = jacobiIteration(xA, xB, A, b, JACOBI_EPS, , JACOBI_MAX_ITER);

double *jacobiIteration(double *x, double *xp, double *A, double *b,
       double eps, int n, int maxIter) { 
  int i, j, convergence, iter; 
  double c, d, delta;
  double *xNew, *xPrev, *xt;

  for (i=0;i<n;i++) {
    x[i] = 1.0;
  }

  xPrev = x;
  xNew = xp;
  iter = 0;
  do {
    iter++;
    delta = 0.0;
    for (i=0;i<n;i++) {
      c = b[i];
      for (j=0;j<n;j++) {
	if (i != j) {
	  c -= A[i * n + j] * xPrev[j];
	}
      }
      c /= A[i * n + i];
      d = fabs(xPrev[i] - c);
      if (d > delta) delta = d;
      xNew[i] = c;
    }
    xt = xPrev;
    xPrev = xNew; 
    xNew = xt;
    convergence = (delta < eps);
  } while ((!convergence) && (iter < maxIter));

  return xPrev;
}




